import { User } from "@prisma/client";
import prisma from "../../prismaClient";
import { AuthenticatedRequest } from "../../middleware/authenticateUser";
import nodemailer from "nodemailer";

/**
 * Verifies the MFA token and returns the associated user if valid.
 * @param token - MFA token to verify
 * @returns the associated user if the token is valid
 */
export const verifyMfaToken = async (token: string) => {
  // Find the token and associated user
  const tokenRecord = await prisma.token.findUnique({
    where: { token },
    include: { user: true },
  });

  // Check if token exists
  if (!tokenRecord) {
    throw new Error("Token not found");
  }

  // Check if token is expired and return user if valid
  const now = new Date();
  if (tokenRecord.expiresAt < now) {
    throw new Error("Token has expired");
  }

  return tokenRecord.user;
};

/**
 * Deletes the specified MFA token.
 * @param token - MFA token to delete
 */
export const deleteMfaToken = async (token: string) => {
  // Delete the token from the database
  await prisma.token.delete({
    where: { token },
  });
};

/**
 * Creates a new MFA token for the specified user.
 * Deletes any existing tokens for the user first.
 * Note: We're not using upsert here as the token is generated by the database.
 * @param user - The user for whom to create the MFA token
 * @returns The newly created MFA token string
 */
export const mfaCreateToken = async (user: User) => {
  // Delete any existing token for the user first
  await prisma.token.deleteMany({
    where: {
      userId: user.id,
    },
  });

  // Create a new token for the user
  const token = await prisma.token.create({
    data: {
      userId: user.id,
    },
  });
  return token.token;
};

/**
 * Sends an MFA token to the user's email using AWS SES via nodemailer.
 * @param authReq - The authenticated request containing user information
 * @param token - The MFA token to send
 * @returns Email send response
 */
export const emailMfaToken = async (
  authReq: AuthenticatedRequest,
  token: string
) => {
  // Create a nodemailer transporter using AWS SES
  const transporter =
    process.env.PROD === "true"
      ? nodemailer.createTransport({
          host: process.env.SMTP_HOST,
          port: process.env.SMTP_PORT ? Number(process.env.SMTP_PORT) : undefined,
          secure: true,
          auth: {
            user: process.env.SMTP_USERNAME,
            pass: process.env.SMTP_PASSWORD,
          },
        } as nodemailer.SentMessageInfo & nodemailer.TransportOptions & import("nodemailer/lib/smtp-transport").Options)
      : nodemailer.createTransport({
          host: "localhost", // Replace with your AWS SES region
          port: 2525, // The mapped SMTP port
          secure: false, // smtp4dev typically doesn't use SSL/TLS by default
          ignoreTLS: true, // Ignore TLS errors for local testing
        } as nodemailer.SentMessageInfo & nodemailer.TransportOptions & import("nodemailer/lib/smtp-transport").Options);

  // Define email options
  const mailOptions = {
    from: process.env.FROM_EMAIL || "noreply@yourapp.com", // Verified email address in SES
    to: authReq.user!.email,
    subject: "Your MFA Token - PM Board",
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #333;">Your MFA Token</h2>
        <p>Hello ${authReq.user!.name},</p>
        <p>You have requested an MFA token for your PM Board account. Your token is:</p>
        <div style="background-color: #f4f4f4; padding: 20px; text-align: center; margin: 20px 0; border-radius: 5px;">
          <h1 style="color: #007bff; letter-spacing: 2px; margin: 0;">${token}</h1>
        </div>
        <p><strong>Important:</strong> This token will expire in 5 minutes for security reasons.</p>
        <p>If you did not request this token, please ignore this email.</p>
        <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
        <p style="color: #666; font-size: 12px;">
          This is an automated email from PM Board. Please do not reply to this email.
        </p>
      </div>
    `,
    text: `
Hello ${authReq.user!.name},

You have requested an MFA token for your PM Board account. Your token is: ${token}

Important: This token will expire in 5 minutes for security reasons.

If you did not request this token, please ignore this email.

This is an automated email from PM Board. Please do not reply to this email.
    `.trim(),
  };

  try {
    // Send the email
    const result = await transporter.sendMail(mailOptions);

    return {
      success: true,
      messageId: result.messageId,
      message: `MFA token sent successfully to ${authReq.user!.email}`,
    };
  } catch (error) {
    console.error("Error sending MFA token email:", error);
    throw new Error(
      `Failed to send MFA token email: ${
        error instanceof Error ? error.message : "Unknown error"
      }`
    );
  }
};
