generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id   String @id @default(uuid())
  name String @db.VarChar(255)
}

model User {
  id             String          @id @default(uuid())
  name           String          @db.VarChar(255)
  email          String          @unique @db.VarChar(255)
  password       String          @db.VarChar(255)
  isActive       Boolean         @default(false) @db.Boolean
  settings       Json            @default("{\"background\": \"default\"}") @db.Json
  createdAt      DateTime        @default(now()) @db.Timestamp(3)
  updatedAt      DateTime        @updatedAt @db.Timestamp(3)
  projectsOwned  Project[]
  projectsJoined ProjectMember[]
  token          Token?
  membership     Membership?     @relation("CurrentMembership") // Effectively mandatory - enforced by DB triggers
  nextMembership NextMembership? @relation("ScheduledMembership")
}

model Membership {
  id        String           @id @default(uuid())
  userId    String           @unique
  status    MembershipStatus @default(FREE)
  startedAt DateTime         @default(now()) @db.Timestamp(3)
  endsAt    DateTime?
  user      User             @relation("CurrentMembership", fields: [userId], references: [id], onDelete: Cascade)
}

model NextMembership {
  id        String           @id @default(uuid())
  userId    String           @unique
  status    MembershipStatus @default(FREE)
  startsAt  DateTime // When this membership should become active
  endsAt    DateTime? // When this membership expires (null for permanent)
  createdAt DateTime         @default(now()) @db.Timestamp(3)
  user      User             @relation("ScheduledMembership", fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id        String   @id @default(uuid())
  token     String   @unique @default(uuid())
  expiresAt DateTime @default(dbgenerated("(NOW() AT TIME ZONE 'UTC') + INTERVAL '5 minutes'"))
  createdAt DateTime @default(now()) @db.Timestamp(3)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String          @id @default(uuid())
  name        String          @db.VarChar(255)
  createdAt   DateTime        @default(now()) @db.Timestamp(3)
  updatedAt   DateTime        @updatedAt @db.Timestamp(3)
  owner       User            @relation(fields: [ownerId], references: [id])
  ownerId     String          
  description String?         @default("") @db.Text
  projectType ProjectType     @default(KANBAN) // We are only using Kanban for the foreseeable future. No other types implemented yet.
  members     ProjectMember[]
  features    Feature[]
}

model Feature {
  id          Int      @id @default(autoincrement())
  title       String   @default("BASE") @db.VarChar(255)
  description String?  @default("") @db.Text
  createdAt   DateTime @default(now()) @db.Timestamp(3)
  projectId   String   @unique
  project     Project  @relation(fields: [projectId], references: [id])
  tickets     Ticket[]
}

model Ticket {
  id          String          @id @default(uuid())
  title       String          @db.VarChar(255)
  description String?         @default("") @db.Text
  createdAt   DateTime        @default(now()) @db.Timestamp(3)
  updatedAt   DateTime        @updatedAt @db.Timestamp(3)
  section     Section         @default(ACTIVE)
  status      Status          @default(UNASSIGNED)
  priority    Priority        @default(NONE)
  timeLog     Int?            @default(0) // Time logged in minutes
  feature     Feature?        @relation(fields: [featureId], references: [id])
  featureId   Int?            @unique
  assignees   ProjectMember[]
}

// Extends a User for a project
model ProjectMember {
  id           String       @id @default(uuid())
  userId       String
  role         Role         @default(MEMBER)
  memberStatus MemberStatus @default(PENDING)
  project      Project      @relation(fields: [projectId], references: [id])
  projectId    String
  tickets      Ticket[]
  User         User         @relation(fields: [userId], references: [id])
}

enum MembershipStatus {
  FREE
  STARTUP
  TEAM
  ENTERPRISE
}

enum Section {
  ACTIVE
  ARCHIVED
  BACKLOG
}

enum Status {
  UNASSIGNED
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
}

enum ProjectType {
  WATERFALL
  KANBAN
  SCRUM
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  TESTER
  GUEST
}

enum Permissions {
  UPDATE_PROJECT
  ADD_MEMBERS
  UPDATE_MEMBERS
  REMOVE_MEMBERS
  CREATE_FEATURE
  UPDATE_FEATURE
  DELETE_FEATURE
  CREATE_TICKET
  UPDATE_TICKET
  DELETE_TICKET
  ASSIGN_TICKET_SELF
  ASSIGN_TICKET_ALL
  UNASSIGN_TICKET_SELF
  UNASSIGN_TICKET_ALL
  MOVE_TICKET_SECTION
  CHANGE_TICKET_STATUS
  CHANGE_TICKET_PRIORITY
}

enum Priority {
  NONE
  LOW
  MODERATE
  HIGH
  URGENT
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  PENDING
}
